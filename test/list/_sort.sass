// Copyright (c) roydukkey. All rights reserved.
// Licensed under the MIT. See LICENSE file in the project root for full license information.
////
/// @author roydukkey
/// @group tests
////

@use 'sass:list'
@use 'src'
@use 'true'


@include true.describe('@function src.sort')

	$strings: 'Three' 'Two' 'Five' 'Six' 'Four' 'One'

	@include true.it('Order string values in ascending order')
		$assert: src.sort($strings)
		$expected: 'Five' 'Four' 'One' 'Six' 'Three' 'Two'
		@include true.assert-equal($assert, $expected)

	@include true.it('Order string values in descending order')
		$assert: src.sort($strings, src.compare-string-desc())
		$expected: 'Two' 'Three' 'Six' 'One' 'Four' 'Five'
		@include true.assert-equal($assert, $expected)

	$simple-mixed: 'Three' 100 false 'Two' 'Five' true 9 'Six' 80 'four' 1 'One'

	@include true.it('Order simple mixed values in ascending order')
		$assert: src.sort($simple-mixed)
		$expected: 1 100 80 9 'Five' 'One' 'Six' 'Three' 'Two' false 'four' true
		@include true.assert-equal($assert, $expected)

	@include true.it('Order simple mixed values in descending order')
		$assert: src.sort($simple-mixed, src.compare-string-desc())
		$expected: true 'four' false 'Two' 'Three' 'Six' 'One' 'Five' 9 80 100 1
		@include true.assert-equal($assert, $expected)

	$lists: (3 4) (1 3) (2 1) (1 2 3) (2 'a')

	@include true.it('Order list values in ascending order')
		$assert: src.sort($lists)
		$expected: (1 2 3) (1 3) (2 1) (2 'a') (3 4)
		@include true.assert-equal($assert, $expected)

	@include true.it('Order list values in descending order')
		$assert: src.sort($lists, src.compare-string-desc())
		$expected: (3 4) (2 'a') (2 1) (1 3) (1 2 3)
		@include true.assert-equal($assert, $expected)

	$null-list: 'Three' null 'Two' 'Five' null 'Six' 'Four' 'One'

	@include true.it('Order null items last')
		$assert: src.sort($null-list)
		$expected: 'Five' 'Four' 'One' 'Six' 'Three' 'Two' null null
		@include true.assert-equal($assert, $expected, '[asc]')

		$assert: src.sort($null-list, src.compare-string-desc())
		$expected: null null "Two" "Three" "Six" "One" "Four" "Five"
		@include true.assert-equal($assert, $expected, '[desc]')

	@include true.it('Order unsupported characters last')
		$assert: src.sort('Three' '多' 'Two' 1 'F多ive' false 'Six' true 'Four' null 'One')
		$expected: 1 'Four' 'F多ive' 'One' 'Six' 'Three' 'Two' false true '多' null
		@include true.assert-equal($assert, $expected)

	$unitless: 1 -9 3 5 0 6 4 2 60 5 7

	@include true.it('Order unitless numbers with numeric sort in ascending order')
		$assert: src.sort($unitless, src.compare-numeric())
		$expected: -9 0 1 2 3 4 5 5 6 7 60
		@include true.assert-equal($assert, $expected)

	@include true.it('Order unitless numbers with numeric sort in descending order')
		$assert: src.sort($unitless, src.compare-numeric-desc())
		$expected: 60 7 6 5 5 4 3 2 1 0 -9
		@include true.assert-equal($assert, $expected)

	@include true.it('Order items keeping bracket style')
		$assert: src.sort(['Three' 'Two' 'Five' 'Six' 'Four' 'One'])
		$expected: ['Five' 'Four' 'One' 'Six' 'Three' 'Two']
		@include true.assert-equal($assert, $expected)

	@include true.it('Order items keeping the same separator')
		$assert: src.sort(('Three', 'Two', 'Five', 'Six', 'Four', 'One'))
		$expected: 'Five', 'Four', 'One', 'Six', 'Three', 'Two'
		@include true.assert-equal($assert, $expected)

	$compatible: 6mm 2px 10mm -9mm 25px 1cm -4px -3cm

	@include true.it('Order compatible numbers automatically with numeric sort in ascending order')
		$assert: src.sort($compatible, src.compare-numeric())
		$expected: -3cm -9mm -4px 2px 6mm 25px 1cm 10mm
		@include true.assert-equal($assert, $expected)

	@include true.it('Order compatible numbers automatically with numeric sort in descending order')
		$assert: src.sort($compatible, src.compare-numeric-desc())
		$expected: 1cm 10mm 25px 6mm 2px -4px -9mm -3cm
		@include true.assert-equal($assert, $expected)

	@include true.it('Order compatible numbers certainly with numeric sort in ascending order')
		$assert: src.sort($compatible, src.compare-numeric(), auto)
		$expected: -3cm -9mm -4px 2px 6mm 25px 1cm 10mm
		@include true.assert-equal($assert, $expected, '[auto >> 0mm]')

		$assert: src.sort($compatible, src.compare-numeric(), 0px)
		$expected: -3cm -9mm -4px 2px 6mm 25px 1cm 10mm
		@include true.assert-equal($assert, $expected, '[0px]')

		$assert: src.sort($compatible, src.compare-numeric(), 0)
		$expected: -9mm -4px -3cm 1cm 2px 6mm 10mm 25px
		@include true.assert-equal($assert, $expected, '[0]')

	@include true.it('Order compatible numbers certainly with numeric sort in descending order')
		$assert: src.sort($compatible, src.compare-numeric-desc(), auto)
		$expected: 1cm 10mm 25px 6mm 2px -4px -9mm -3cm
		@include true.assert-equal($assert, $expected, '[auto >> 0mm]')

		$assert: src.sort($compatible, src.compare-numeric-desc(), 0px)
		$expected: 1cm 10mm 25px 6mm 2px -4px -9mm -3cm
		@include true.assert-equal($assert, $expected, '[0px]')

		$assert: src.sort($compatible, src.compare-numeric-desc(), 0)
		$expected: 25px 10mm 6mm 2px 1cm -3cm -4px -9mm
		@include true.assert-equal($assert, $expected, '[0]')

	$incompatible: 6mm 2px 4em 20mm -9mm 2cm 25px 1.25cm -4px 1 -3cm

	@include true.it('Order incompatible numbers automatically with numeric sort in ascending order')
		$assert: src.sort($incompatible, src.compare-numeric())
		$expected: -3cm -9mm -4px 2px 1 4em 6mm 25px 1.25cm 2cm 20mm
		@include true.assert-equal($assert, $expected, '[auto => 0mm]')

		$assert: src.sort($assert, src.compare-numeric())
		$expected: -3cm -9mm -4px 2px 6mm 25px 1 1.25cm 20mm 2cm 4em
		@include true.assert-equal($assert, $expected, '[auto => 0cm]')

	@include true.it('Order incompatible numbers automatically with numeric sort in descending order')
		$assert: src.sort($incompatible, src.compare-numeric-desc())
		$expected: 20mm 2cm 1.25cm 25px 6mm 4em 1 2px -4px -9mm -3cm
		@include true.assert-equal($assert, $expected, '[auto => 0mm]')

		$assert: src.sort($assert, src.compare-numeric-desc())
		$expected: 4em 2cm 20mm 1.25cm 1 25px 6mm 2px -4px -9mm -3cm
		@include true.assert-equal($assert, $expected, '[auto => 0cm]')

	@include true.it('Order incompatible numbers certainly with numeric sort in ascending order')
		$assert: src.sort($incompatible, src.compare-numeric(), 'auto')
		$expected: -3cm -9mm -4px 2px 1 4em 6mm 25px 1.25cm 2cm 20mm
		@include true.assert-equal($assert, $expected, '[auto => 0mm]')

		$assert: src.sort($incompatible, src.compare-numeric(), 0cm)
		$expected: -3cm -9mm -4px 2px 6mm 25px 1 1.25cm 20mm 2cm 4em
		@include true.assert-equal($assert, $expected, '[0cm]')

		$assert: src.sort($incompatible, src.compare-numeric(), 0)
		$expected: -9mm -4px -3cm 1 1.25cm 2cm 2px 4em 6mm 20mm 25px
		@include true.assert-equal($assert, $expected, '[0]')

	@include true.it('Order incompatible numbers certainly with numeric sort in descending order')
		$assert: src.sort($incompatible, src.compare-numeric-desc(), auto)
		$expected: 20mm 2cm 1.25cm 25px 6mm 4em 1 2px -4px -9mm -3cm
		@include true.assert-equal($assert, $expected, '[auto => 0mm]')

		$assert: src.sort($incompatible, src.compare-numeric-desc(), 0cm)
		$expected: 4em 2cm 20mm 1.25cm 1 25px 6mm 2px -4px -9mm -3cm
		@include true.assert-equal($assert, $expected, '[0cm]')

		$assert: src.sort($incompatible, src.compare-numeric-desc(), 0)
		$expected: 25px 20mm 6mm 4em 2cm 2px 1.25cm 1 -3cm -4px -9mm
		@include true.assert-equal($assert, $expected, '[0]')

	@include true.it('Determines proper units for automatic numeric sort with leading unitless numbers')
		$list: list.join(0 1 2 3 4 5, $incompatible)
		$assert: src.sort($list, src.compare-numeric())
		$expected: -3cm -9mm -4px 0 2px 1 1 2 3 4em 4 5 6mm 25px 1.25cm 2cm 20mm
		@include true.assert-equal($assert, $expected, '[auto => 0mm]')

	$numeric-null-list: list.join(null a null, $incompatible)

	@include true.it('Shift non-numeric values to end of list with numeric sort')
		$assert: src.sort($numeric-null-list, src.compare-numeric())
		$expected: -3cm -9mm -4px 2px 1 4em 6mm 25px 1.25cm 2cm 20mm null a null
		@include true.assert-equal($assert, $expected, '[asc]')

		$assert: src.sort($assert, src.compare-numeric-desc())
		$expected: null a null 4em 20mm 2cm 1.25cm 1 25px 6mm 2px -4px -9mm -3cm
		@include true.assert-equal($assert, $expected, '[desc]')

	@include true.it('Return a list with a different separator')
		$assert: src.sort($strings, $separator: comma)
		$expected: 'Five', 'Four', 'One', 'Six', 'Three', 'Two'
		@include true.assert-equal($assert, $expected)

	@include true.it('Return a list when given a map')
		$assert: src.sort((a: 1))
		$expected: (a 1,)
		@include true.assert-equal($assert, $expected, '[single value; auto]')

		$assert: src.sort((a: 1), $separator: comma)
		$expected: (a 1,)
		@include true.assert-equal($assert, $expected, '[single value; comma]')

		$assert: src.sort((a: 1), $separator: space)
		$expected: list.append((), a 1)
		@include true.assert-equal($assert, $expected, '[single value; space]')

		$assert: src.sort((a: 1, b: 2))
		$expected: (a 1, b 2)
		@include true.assert-equal($assert, $expected, '[multiple values; auto]')

		$assert: src.sort((a: 1, b: 2))
		$expected: (a 1, b 2)
		@include true.assert-equal($assert, $expected, '[multiple values; comma]')

		$assert: src.sort((a: 1, b: 2), $separator: space)
		$expected: (a 1) (b 2)
		@include true.assert-equal($assert, $expected, '[multiple values; space]')

	@include true.it('Throws when $compare is not a function')
		$assert: src.sort(null, null)
		$expected: 'ERROR: $compare: `null` is not a function for `sort()`.'
		@include true.assert-equal($assert, $expected)

	@include true.it('Throws when $center is not a number')
		$assert: src.sort(null, $center: null)
		$expected: 'ERROR: $center: `null` is not a number for `sort()`.'
		@include true.assert-equal($assert, $expected)

	@include true.it('Throws when $center is not "auto" or zero with or without units')
		$assert: src.sort(null, $center: 10)
		$expected: 'ERROR: $center: Must be "auto" or zero with or without units for `sort()`.'
		@include true.assert-equal($assert, $expected, '[10]')

		$assert: src.sort(null, $center: 10mm)
		$expected: 'ERROR: $center: Must be "auto" or zero with or without units for `sort()`.'
		@include true.assert-equal($assert, $expected, '[10mm]')

	@include true.it('Throws when $separator is invalid')
		$assert: src.sort(null, $separator: null)
		$expected: 'ERROR: $separator: Must be "space", "comma", "slash", or "auto" for `sort()`.'
		@include true.assert-equal($assert, $expected)
