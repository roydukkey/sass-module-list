// Copyright (c) roydukkey. All rights reserved.
// Licensed under the MIT. See LICENSE file in the project root for full license information.
////
/// @author roydukkey
/// @group tests
////

@use 'sass:list'
@use 'src'
@use 'true'


@include true.describe('@function src.reverse')

	@include true.it('Reverse the values of a list')
		$assert: src.reverse([1 2 'c' 4 'd'])
		$expected: ['d' 4 'c' 2 1]
		@include true.assert-equal($assert, $expected)

	@include true.it('Reverse the values of a list non-recursively')
		$assert: src.reverse(1 [2 'c'] 4 'd')
		$expected: 'd' 4 [2 'c'] 1
		@include true.assert-equal($assert, $expected, "[1 [2 'c'] 4 'd']")

		$assert: src.reverse([1 (2 'c') 4 'd'])
		$expected: ['d' 4 (2 'c') 1]
		@include true.assert-equal($assert, $expected, "[[1 (2 'c') 4 'd']]")

	@include true.it('Return a list with a different separator')
		$assert: src.reverse([1 2 'c' 4 'd'], comma)
		$expected: ['d', 4, 'c', 2, 1]
		@include true.assert-equal($assert, $expected)

	@include true.it('Return a list when given a map')
		$assert: src.reverse((a: 1))
		$expected: (a 1,)
		@include true.assert-equal($assert, $expected, '[single value; auto]')

		$assert: src.reverse((a: 1), $separator: comma)
		$expected: (a 1,)
		@include true.assert-equal($assert, $expected, '[single value; comma]')

		$assert: src.reverse((a: 1), $separator: space)
		$expected: list.append((), a 1)
		@include true.assert-equal($assert, $expected, '[single value; space]')

		$assert: src.reverse((a: 1, b: 2))
		$expected: (b 2, a 1)
		@include true.assert-equal($assert, $expected, '[multiple values; auto]')

		$assert: src.reverse((a: 1, b: 2))
		$expected: (b 2, a 1)
		@include true.assert-equal($assert, $expected, '[multiple values; comma]')

		$assert: src.reverse((a: 1, b: 2), $separator: space)
		$expected: (b 2) (a 1)
		@include true.assert-equal($assert, $expected, '[multiple values; space]')

	@include true.it('Throws when $separator is invalid')
		$assert: src.reverse(null, null)
		$expected: 'ERROR: $separator: Must be "space", "comma", "slash", or "auto" for `reverse()`.'
		@include true.assert-equal($assert, $expected)
