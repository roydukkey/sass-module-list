// Copyright (c) roydukkey. All rights reserved.
// Licensed under the MIT. See LICENSE file in the project root for full license information.
////
/// @author roydukkey
/// @group api
////

@use 'sass:list'
@use 'sass:meta'
@use '../internal'


///
/// Creates an empty list with the specified characteristics.
///
/// @param {String} $separator [comma] - The type of separator to be used by the empty list.
/// @param {Boolean} $bracketed [false] - Whether the empty list has square brackets or no brackets.
/// @return {List}
///
/// @throw Must be "space", "comma", "slash", or "auto".
///
/// @access public
/// @require internal.$exception-function
/// @require internal.param-separator-is-invalid
/// @require internal.exception-separator
///
	@overload empty($separator: comma, $bracketed: false)


///
/// Creates an empty list based on the characteristics of the specified list.
///
/// @param {List} $list - The list from which to determine separator and bracket style.
/// @return {List}
///
/// @access public
///
	@overload empty($list)


///
/// Creates an empty list.
///
/// @return {List}
///
/// @access private
/// @require internal.$exception-function
/// @require internal.param-separator-is-invalid
/// @require internal.exception-separator
///
@function empty($list: comma, $bracketed: false, $separator: null)
	@if meta.type-of($list) == 'list'
		$separator: list.separator($list)
		$bracketed: list.is-bracketed($list)

	@else
		internal.$exception-function: 'empty'

		@if $separator == null
			$separator: $list

		@if internal.param-separator-is-invalid($separator)
			@error internal.exception-separator()

	@return list.join((), (), $separator, $bracketed)
