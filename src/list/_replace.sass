// Copyright (c) roydukkey. All rights reserved.
// Licensed under the MIT. See LICENSE file in the project root for full license information.
////
/// @author roydukkey
/// @group api
////

@use 'sass:meta'
@use 'map'
@use '../internal'


///
/// Returns a copy of a list with all occurrences of the given value replaced by the specified replacement.
///
/// @param {List} $list - The list from which the value is to be replaced.
/// @param {*} $value - The value to be replace by the replacement.
/// @param {*} $replacement - The value that replaces the specified value.
/// @param {String} $separator [auto] - The type of separator to be used by the copied list.
/// @return {List}
///
/// @throw Must be "space", "comma", "slash", or "auto".
///
/// @access public
/// @require _replace-transformer
/// @require internal.exception-separator
/// @require internal.param-separator-is-invalid
/// @require map.map
///
@function replace($list, $value, $replacement, $separator: auto)

	@if internal.param-separator-is-invalid($separator)
		@error internal.exception-separator('replace')

	@return map.map($list, meta.get-function('_replace-transformer'), $separator, auto, $value, $replacement)


///
/// Used to compare two list values for equality, returning the replacement when true, otherwise returning the original value.
///
/// @param {*} $item - The current item being processed in the list.
/// @param {Number} $index - The index of the current item being processed in the list.
/// @param {List} $list - The list being processed.
/// @param {*} $value - The value to be replace by the replacement.
/// @param {*} $replacement - The value that replaces the specified value.
/// @return {*}
///
/// @access private
///
@function _replace-transformer($item, $index, $list, $value, $replacement)
	@return if($item == $value, $replacement, $item)
