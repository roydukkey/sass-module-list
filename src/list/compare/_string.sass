// Copyright (c) roydukkey. All rights reserved.
// Licensed under the MIT. See LICENSE file in the project root for full license information.
////
/// @author roydukkey
/// @group api
////

@use 'sass:list'
@use 'sass:math'
@use 'sass:meta'
@use 'sass:string'


///
/// The list that define the sort order for UTF-16 code units.
///
/// @type List
///
/// @access private
///
$_order: '' ' ' '!' '"' '#' '$' '%' '&' "'" '(' ')' '*' '+' ',' '-' '.' '/'
$_order: list.join($_order, '0' '1' '2' '3' '4' '5' '6' '7' '8' '9')
$_order: list.join($_order, ':' ';' '<' '=' '>' '?' '@')
$_order: list.join($_order, 'A' 'B' 'C' 'D' 'E' 'F' 'G' 'H' 'I' 'J' 'K' 'L' 'M' 'N' 'O' 'P' 'Q' 'R' 'S' 'T' 'U' 'V' 'W' 'X' 'Y' 'Z')
$_order: list.join($_order, '[' '\\' ']' '^' '_' '`')
$_order: list.join($_order, 'a' 'b' 'c' 'd' 'e' 'f' 'g' 'h' 'i' 'j' 'k' 'l' 'm' 'n' 'o' 'p' 'q' 'r' 's' 't' 'u' 'v' 'w' 'x' 'y' 'z')
$_order: list.join($_order, '{' '|' '}' '~')


///
/// Used to compare two non-null list items by converting them to strings and comparing strings in ascending UTF-16 code units order from `feff0020` to `feff007e`. For example, 'banana' comes before 'cherry'. In a numeric sort, 9 comes before 80, but because numbers are converted to strings, '80' comes before '9' in the Unicode order. All null items are sorted to the end of the list.
///
/// @param {*} $first-item - The first item for the comparison.
/// @param {*} $second-item - The second item for the comparison.
/// @ignore @param {Number} $center - Irrelevant for this function.
/// @return {Number}
///
/// @access private
/// @require $_order
///
@function _string($first-item, $second-item, $center)

	@if $first-item == null
		@return 1

	@if $second-item == null
		@return -1

	$first-item: '"#{$first-item}"'
	$second-item: '"#{$second-item}"'

	@for $i from 1 through math.min(string.length($first-item), string.length($second-item))
		$first-index: list.index($_order, string.slice($first-item, $i, $i))
		$second-index: list.index($_order, string.slice($second-item, $i, $i))

		// The first item is not with the support UTF-16 range.
		@if not $first-index
			@return 1

		// The second item is not with the support UTF-16 range.
		@if not $second-index
			@return -1

		// Both items are found in the range, return the difference of the indexes of the characters.
		@if $first-index != $second-index
			@return $first-index - $second-index

	// Both items are equal
	@return 0


///
/// Used to compare two non-null list items by converting them to strings and comparing strings in descending UTF-16 code units order from `feff0020` to `feff007e`. For example, 'banana' comes before 'cherry'. In a numeric sort, 9 comes before 80, but because numbers are converted to strings, '80' comes before '9' in the Unicode order. All null items are sorted to the end of the list.
///
/// @param {*} $first-item - The first item for the comparison.
/// @param {*} $second-item - The second item for the comparison.
/// @ignore @param {Number} $center - Irrelevant for this function.
/// @return {Number}
///
/// @access private
/// @require _string
///
@function _string-desc($first-item, $second-item, $center)
	@return _string($second-item, $first-item, $center)


///
/// The string comparison method used by the sort function.
///
/// @return {Function}
///
/// @access public
/// @require _string
///
@function string()
	@return meta.get-function('_string')


///
/// The descending string comparison method used by the sort function.
///
/// @return {Function}
///
/// @access public
/// @require _string-desc
///
@function string-desc()
	@return meta.get-function('_string-desc')
